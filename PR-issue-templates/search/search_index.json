{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GMNSpy\u2019s documentation","text":""},{"location":"#gmnspy","title":"GMNSpy","text":"<p>Python tool for General Modeling Network Specification (GMNS) developed  by Zephyr  Foundation for Travel Analysis.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>git clone https://github.com/e-lo/GMNSpy.git\ncd GMNSpy\npip install .\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#read-a-single-file","title":"Read a single file","text":"<p>Returns a dataframe that conforms to the specified schema and have been  validated.</p> <pre><code>df = gmnspy.in_out.read_gmns_csv(data_filename, schema_file=schemafilename)\n</code></pre>"},{"location":"#read-a-network","title":"Read a network","text":"<p>Returns a dictionary of dataframes that conform to the specified schema  and have been validated.</p> <p>Checks foreign keys between files.</p> <pre><code>net = gmnspy.in_out.read_gmns_network(data_directory, config: \"gmns.spec.json\")\n</code></pre>"},{"location":"#gmns-specification","title":"GMNS specification","text":"<p>A copy of the GMNS specification is kept in the <code>/spec</code> sub-directory as a  series of JSON tables.</p>"},{"location":"#data-table-schemas","title":"Data Table schemas","text":"<p>Data table schemas are specified in JSON and are compatible with the  frictionless data table  schema standards.</p> <p>Example:  <pre><code>{\n\"primaryKey\": \"segment_id\",\n\"missingValues\": [\"NaN\",\"\"],\n\"fields\": [\n{\n\"name\": \"segment_id\",\n\"type\": \"any\",\n\"description\": \"Primary key.\",\n\"constraints\": {\n\"required\": true,\n\"unique\": true\n}\n},\n{\n\"name\": \"road_link_id\",\n\"type\": \"any\",\n\"description\": \"Required. Foreign key to road_links. The link that the segment is located on.\",\n\"foreign_key\": \"link.link_id\",\n\"constraints\": {\n\"required\": true\n}\n},\n{\n\"name\": \"ref_node_id\",\n\"type\": \"any\",\n\"description\": \"Required. Foreign key to node.\",\n\"foreign_key\": \"node.node_id\",\n\"constraints\": {\n\"required\": true\n}\n},\n{\n\"name\": \"start_lr\",\n\"type\": \"number\",\n\"description\": \"Required. Distance from ref_node_id.\",\n\"constraints\": {\n\"required\": true,\n\"minimum\": 0\n}\n},\n{\n\"name\": \"end_lr\",\n\"type\": \"number\",\n\"description\": \"Required. Distance from ref_node_id.\",\n\"constraints\": {\n\"required\": true,\n\"minimum\": 0\n}\n}\n]\n}\n</code></pre></p>"},{"location":"#network-data-config","title":"Network Data Config","text":"<p>Network data schemas are specified in JSON and are compatible with the  frictionless data data package standards.</p> <p>Example:  <pre><code>{\n\"profile\": \"gmns-data-package\",\n\"profile_version\":0.0,\n\"name\": \"my-dataset\",\n\"resources\": [\n{\n\"name\":\"link\",\n\"path\": \"link.csv\",\n\"schema\": \"link.schema.json\",\n\"required\": true\n},\n{\n\"name\":\"node\",\n\"path\": \"node.csv\",\n\"schema\": \"node.schema.json\",\n\"required\": true\n}\n]\n}\n</code></pre></p>"},{"location":"#issues","title":"Issues","text":"<p>Please add issues, bugs, and feature requests to Github.</p>"},{"location":"#roadmap","title":"Roadmap","text":"<p>Current feature roadmap includes:</p> <ul> <li>conversion tools from open street map</li> <li>network connectivity checks</li> <li>auto documentation of schema to markdown files</li> <li>tests tests tests</li> </ul> <p>Feel free to submit pull requests for consideration. See <code>CONTRIBUTING</code> for more detailed instructions.</p>"},{"location":"#credits","title":"Credits","text":"<p>Primary Author: Elizabeth Sall, UrbanLabs LLC</p> <p>Contributing authors and code maintainers:</p> <ul> <li>Pedro Carmago, OuterLoop Consulting</li> <li>Ian Berg, Volpe Center</li> </ul> <p>See all in <code>CONTRIBUTORS.md</code></p>"},{"location":"#license-to-use","title":"License to Use","text":"<p>The code herein is licensed under the Apache License 2.0 as defined in LICENSE file.</p>"},{"location":"api/","title":"Usage","text":""},{"location":"api/#read-a-single-file","title":"Read a single file","text":"<p>Returns a dataframe that conforms to the specified schema and have been validated.</p> <pre><code>df = gmnspy.in_out.read_gmns_csv(data_filename, schema_file=schemafilename)\n</code></pre>"},{"location":"api/#read-a-network","title":"Read a network","text":"<p>Returns a dictionary of dataframes that conform to the specified schema and have been validated.</p> <p>Checks foreign keys between files.</p> <pre><code>net = gmnspy.in_out.read_gmns_network(data_directory, config: \"gmns.spec.json\")\n</code></pre>"},{"location":"api/#api","title":"API","text":""},{"location":"api/#readwrite","title":"Read/Write","text":"<p>::: gmnspy.in_out.read_gmns_csv</p> <p>::: gmnspy.in_out.read_gmns_network</p>"},{"location":"api/#validation","title":"Validation","text":"<p>::: gmnspy.validate</p> <p>::: gmnspy.schema.read_schema</p> <p>::: gmnspy.schema.read_config</p>"},{"location":"api/#conversions","title":"Conversions","text":"<p>TKTK</p>"},{"location":"api/#auto-documentation","title":"Auto Documentation","text":"<p>::: gmnspy.schema.document_schema</p> <p>::: gmnspy.utils.list_to_md_table</p>"},{"location":"architecture/","title":"Architecture","text":"<p>To come.</p>"},{"location":"development/","title":"Macro Rendering Error","text":"<p>File: <code>development.md</code></p> <p>FileNotFoundError: [Errno 2] No such file or directory: \u2018/home/runner/work/GMNSpy/GMNSpy/contributors.md\u2019</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/home/runner/work/GMNSpy/GMNSpy/main.py\", line 71, in include_file\n    with open(full_filename, \"r\") as f:\n         ^^^^^^^^^^^^^^^^^^^^^^^^\nFileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/GMNSpy/GMNSpy/contributors.md'\n</code></pre>"},{"location":"spec/","title":"Macro Rendering Error","text":"<p>File: <code>spec.md</code></p> <p>FrictionlessException: [schema-error] Schema is not valid: descriptor is not valid (Schema is not valid: names of the fields are not unique)</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 102, in top-level template code\n  File \"/home/runner/work/GMNSpy/GMNSpy/main.py\", line 112, in frictionless_schemas\n    return document_schemas_to_md(schema_path)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/GMNSpy/GMNSpy/gmnspy/schema.py\", line 135, in document_schemas_to_md\n    md = frictionless.Schema(s).to_markdown().replace(\"## `schema`\", _name)\n         ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frictionless/metadata.py\", line 42, in __call__\n    obj = cls.__create__(*args, **kwargs)  # type: ignore\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frictionless/schema/schema.py\", line 82, in __create__\n    return cls.from_descriptor(descriptor, **options)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frictionless/metadata.py\", line 184, in from_descriptor\n    raise FrictionlessException(error, reasons=errors)\nfrictionless.exception.FrictionlessException: [schema-error] Schema is not valid: descriptor is not valid (Schema is not valid: names of the fields are not unique)\n</code></pre>"}]}